/****************************************************************************
**	OrangeBot Project
*****************************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************************
**	Panopticon
*****************************************************************************
**	Author: 			Orso Eric
**	Creation Date:
**	Last Edit Date:
**	Revision:			1
**	Version:			0.1 ALFA
****************************************************************************/

/****************************************************************************
**	HYSTORY VERSION
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	DESCRIPTION
*****************************************************************************
**	Stores a platform status variables
****************************************************************************/

/****************************************************************************
**	KNOWN BUG
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	INCLUDES
****************************************************************************/

#include <cstdio>
#include <iostream>
//Debug trace log
//#define ENABLE_DEBUG
#include "debug.h"
//Class Header
#include "panopticon.h"

/****************************************************************************
**	NAMESPACES
****************************************************************************/

namespace Orangebot
{

/****************************************************************************
**	GLOBAL VARIABILES
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	CONSTRUCTORS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Empty Constructor
//!	Panopticon | void
/***************************************************************************/
//! @return no return
//!	@details
//! Empty constructor
/***************************************************************************/

Panopticon::Panopticon( void )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class variables
	this -> init();

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return;	//OK
}	//end constructor:

/****************************************************************************
*****************************************************************************
**	DESTRUCTORS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Empty Destructor
//!	Panopticon | void
/***************************************************************************/
//! @return no return
//!	@details
//! Empty destructor
/***************************************************************************/

Panopticon::~Panopticon( void )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return;	//OK
}	//end destructor:

/****************************************************************************
*****************************************************************************
**	OPERATORS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	SETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	GETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	REFERENCES
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Public Reference
//!	pwm | int
/***************************************************************************/
//! @param index | uint8_t | index of the PWM channel to be addressed
//! @return int& reference to PWM channel
//!	@details
//! Directly address a private var from the outside
/***************************************************************************/

int &Panopticon::pwm( int index )
{
	//If: bad number of channels
	if (index >= NUM_VNH7040PWM)
	{
		DPRINT("ERR: <%s> | bad index: %d\n", __FUNCTION__, index);
        //Address a dummy variable so not to dirty actual useful fields and not cause memory violation access
        return this -> g_dummy; //FAIL
	}

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return this -> g_pwm[ index ];	//OK
}	//end method: pwm | int

/***************************************************************************/
//!	@brief Public Reference
//!	enc_pos | int
/***************************************************************************/
//! @param index | uint8_t | index of the encoder absolute reading
//! @return int& reference to PWM channel
//!	@details
//! Directly address a private var from the outside
/***************************************************************************/

int &Panopticon::enc_pos( int index )
{
	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	//If: bad number of channels
	if (index >= NUM_ENC)
	{
		DPRINT("ERR: <%s> | bad index: %d\n", __FUNCTION__, index);
        //Address a dummy variable so not to dirty actual useful fields and not cause memory violation access
        return g_dummy; //FAIL
	}

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return this -> g_enc_pos[ index ];	//OK
}	//end method: enc_pos | int

/***************************************************************************/
//!	@brief Public Reference
//!	enc_abs | int
/***************************************************************************/
//! @param index | uint8_t | index of the encoder speed reading
//! @return int& reference to PWM channel
//!	@details
//! Directly address a private var from the outside
/***************************************************************************/

int &Panopticon::enc_spd( int index )
{
	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	//If: bad number of channels
	if (index >= NUM_ENC)
	{
		DPRINT("ERR: <%s> | bad index: %d\n", __FUNCTION__, index);
        //Address a dummy variable so not to dirty actual useful fields and not cause memory violation access
        return g_dummy; //FAIL
	}

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return this -> g_enc_spd[ index ];	//OK
}	//end method: enc_abs | int

/***************************************************************************/
//!	@brief Public Reference
//!	signature | void
/***************************************************************************/
//! @return std::string& reference to signature
//!	@details
//! Reference to platform signature
/***************************************************************************/

std::string &Panopticon::signature( void )
{
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	return this -> g_signature;	//OK
}	//end method: enc_abs | int

/****************************************************************************
*****************************************************************************
**	TESTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PUBLIC METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PUBLIC STATIC METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PRIVATE METHODS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Private Method
//!	init | void
/***************************************************************************/
//! @return no return
//!	@details
//! Initialize class variables
/***************************************************************************/

void Panopticon::init( void )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	//counter
	int t;

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//For each DC motor channel
	for (t = 0; t< NUM_VNH7040PWM;t++)
	{
		//Initialize PWM
		this -> g_pwm[t] = 0;
	}

	//For each Encoder channel
	for (t = 0; t< NUM_ENC;t++)
	{
		//Initialize encoder count
		this -> g_enc_pos[t] = 0;
		this -> g_enc_spd[t] = 0;
	}

	//For each PID parameter channel
	for (t = 0; t< NUM_ENC;t++)
	{

	}

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();
	return;
}	//end method: init | void

/***************************************************************************/
//!	@brief Public Method
//!	Dummy | void
/***************************************************************************/
// @param
//! @return no return
//!	@details
//! Method
/***************************************************************************/

bool Panopticon::dummy( void )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();
	return false;	//OK
}	//end method:

/****************************************************************************
**	NAMESPACES
****************************************************************************/

} //End Namespace
